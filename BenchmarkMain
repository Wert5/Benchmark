import java.awt.*;
import java.util.*;

import javax.swing.*;


public class BenchmarkMain {

	public static void main(String[] args){
		JFrame window=null;
		//window.setLayout(new FlowLayout());
		//window.add(new JLabel("Setting up test array"));
		ArrayList<String> data= new ArrayList<String>();
		for(int i=0;i<250000;i++){
			data.add(nameGen());
		}
		ArrayList<String> dataSorted= new ArrayList<String>(data);
		Collections.sort(dataSorted);
		for(int i: new int[] {1000,100000,250000}){
			window= new JFrame("Benchmarks-"+i);
			window.setVisible(true);
			window.setSize(500,500);
			window.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
			String midSort= dataSorted.get(i/2);
			String midNotS= data.get(i/2);
			String firstS=dataSorted.get(0);
			String firstNotS=data.get(0);
			String notThere=dataSorted.get(i-1);
			String notThereNotS=data.get(i-1);
			long TimeSumSeqS=0;
			long TimeSumBin=0;
			long TimeSumSeqNotS=0;
			int CompSumSeqS=0;
			int CompSumBin=0;
			int CompSumSeqNotS=0;
			int minCompSumSeqS=Integer.MAX_VALUE;
			int minCompSumBin=Integer.MAX_VALUE;
			int minCompSumSeqNotS=Integer.MAX_VALUE;
			int maxCompSumSeqS=0;
			int maxCompSumBin=0;
			int maxCompSumSeqNotS=0;
			long minTimeSumSeqS=Long.MAX_VALUE;
			long minTimeSumBin=Long.MAX_VALUE;
			long minTimeSumSeqNotS=Long.MAX_VALUE;
			long maxTimeSumSeqS=0;
			long maxTimeSumBin=0;
			long maxTimeSumSeqNotS=0;
			window.setLayout(new GridLayout(7,4));
			//window.setLayout(new FlowLayout());
			window.add(new JLabel("Target"));
			window.add(new JLabel("Sequential(sorted)"));
			window.add(new JLabel("Binary"));
			window.add(new JLabel("Sequential(unsorted)"));
			window.add(new JLabel("Middle"));
			long t1 =System.nanoTime();
			int comp=seqSearch(dataSorted,midSort,i);
			long t2=System.nanoTime()-t1;
			TimeSumSeqS+=t2;
			CompSumSeqS+=comp;
			if(minCompSumSeqS>comp){
				minCompSumSeqS=comp;
			}
			if(maxCompSumSeqS<comp){
				maxCompSumSeqS=comp;
			}
			if(minTimeSumSeqS>t2){
				minTimeSumSeqS=t2;
			}
			if(maxTimeSumSeqS<t2){
				maxTimeSumSeqS=t2;
			}
			window.add(new JLabel("t(ns):"+t2+"Compares:"+comp));
			window.repaint();
			t1 =System.nanoTime();
			comp=binarySearch(dataSorted,midSort,i);
			t2=System.nanoTime()-t1;
			TimeSumBin+=t2;
			CompSumBin+=comp;
			if(minCompSumBin>comp){
				minCompSumBin=comp;
			}
			if(maxCompSumBin<comp){
				maxCompSumBin=comp;
			}
			if(minTimeSumBin>t2){
				minTimeSumBin=t2;
			}
			if(maxTimeSumBin<t2){
				maxTimeSumBin=t2;
			}
			window.add(new JLabel("t(ns):"+t2+"Compares:"+comp));
			window.repaint();
			t1 =System.nanoTime();
			comp=seqSearch(data,midNotS,i);
			t2=System.nanoTime()-t1;
			TimeSumSeqNotS+=t2;
			CompSumSeqNotS+=comp;
			if(minCompSumSeqNotS>comp){
				minCompSumSeqNotS=comp;
			}
			if(maxCompSumSeqNotS<comp){
				maxCompSumSeqNotS=comp;
			}
			if(minTimeSumSeqNotS>t2){
				minTimeSumSeqNotS=t2;
			}
			if(maxTimeSumSeqNotS<t2){
				maxTimeSumSeqNotS=t2;
			}
			window.add(new JLabel("t(ns):"+t2+"Compares:"+comp));
			window.add(new JLabel("First"));
			window.repaint();
			t1 =System.nanoTime();
			comp=seqSearch(dataSorted,firstS,i);
			t2=System.nanoTime()-t1;
			TimeSumSeqS+=t2;
			CompSumSeqS+=comp;
			if(minCompSumSeqS>comp){
				minCompSumSeqS=comp;
			}
			if(maxCompSumSeqS<comp){
				maxCompSumSeqS=comp;
			}
			if(minTimeSumSeqS>t2){
				minTimeSumSeqS=t2;
			}
			if(maxTimeSumSeqS<t2){
				maxTimeSumSeqS=t2;
			}
			window.add(new JLabel("t(ns):"+t2+"Compares:"+comp));
			window.repaint();
			t1 =System.nanoTime();
			comp=binarySearch(dataSorted,firstS,i);
			t2=System.nanoTime()-t1;
			TimeSumBin+=t2;
			CompSumBin+=comp;
			if(minCompSumBin>comp){
				minCompSumBin=comp;
			}
			if(maxCompSumBin<comp){
				maxCompSumBin=comp;
			}
			if(minTimeSumBin>t2){
				minTimeSumBin=t2;
			}
			if(maxTimeSumBin<t2){
				maxTimeSumBin=t2;
			}
			window.add(new JLabel("t(ns):"+t2+"Compares:"+comp));
			window.repaint();
			t1 =System.nanoTime();
			comp=seqSearch(data,firstNotS,i);
			t2=System.nanoTime()-t1;
			TimeSumSeqNotS+=t2;
			CompSumSeqNotS+=comp;
			if(minCompSumSeqNotS>comp){
				minCompSumSeqNotS=comp;
			}
			if(maxCompSumSeqNotS<comp){
				maxCompSumSeqNotS=comp;
			}
			if(minTimeSumSeqNotS>t2){
				minTimeSumSeqNotS=t2;
			}
			if(maxTimeSumSeqNotS<t2){
				maxTimeSumSeqNotS=t2;
			}
			window.add(new JLabel("t(ns):"+t2+"Compares:"+comp));
			window.add(new JLabel("Last"));
			window.repaint();
			t1 =System.nanoTime();
			comp=seqSearch(dataSorted,notThere,i);
			t2=System.nanoTime()-t1;
			TimeSumSeqS+=t2;
			CompSumSeqS+=comp;
			if(minCompSumSeqS>comp){
				minCompSumSeqS=comp;
			}
			if(maxCompSumSeqS<comp){
				maxCompSumSeqS=comp;
			}
			if(minTimeSumSeqS>t2){
				minTimeSumSeqS=t2;
			}
			if(maxTimeSumSeqS<t2){
				maxTimeSumSeqS=t2;
			}
			window.add(new JLabel("t(ns):"+t2+"Compares:"+comp));
			window.repaint();
			t1 =System.nanoTime();
			comp=binarySearch(dataSorted,notThere,i);
			t2=System.nanoTime()-t1;
			TimeSumBin+=t2;
			CompSumBin+=comp;
			if(minCompSumBin>comp){
				minCompSumBin=comp;
			}
			if(maxCompSumBin<comp){
				maxCompSumBin=comp;
			}
			if(minTimeSumBin>t2){
				minTimeSumBin=t2;
			}
			if(maxTimeSumBin<t2){
				maxTimeSumBin=t2;
			}
			window.add(new JLabel("t(ns):"+t2+"Compares:"+comp));
			window.repaint();
			t1 =System.nanoTime();
			comp=seqSearch(data,notThereNotS,i);
			t2=System.nanoTime()-t1;
			TimeSumSeqNotS+=t2;
			CompSumSeqNotS+=comp;
			if(minCompSumSeqNotS>comp){
				minCompSumSeqNotS=comp;
			}
			if(maxCompSumSeqNotS<comp){
				maxCompSumSeqNotS=comp;
			}
			if(minTimeSumSeqNotS>t2){
				minTimeSumSeqNotS=t2;
			}
			if(maxTimeSumSeqNotS<t2){
				maxTimeSumSeqNotS=t2;
			}
			window.add(new JLabel("t(ns):"+t2+"Compares:"+comp));
			window.add(new JLabel("Average"));
			window.repaint();
			for(int j=0;j<7;j++){
				t1 =System.nanoTime();
				comp=seqSearch(dataSorted,dataSorted.get((int)(Math.random()*i)),i);
				CompSumSeqS+=comp;
				t2=System.nanoTime()-t1;
				TimeSumSeqS+=t2;
				if(minCompSumSeqS>comp){
					minCompSumSeqS=comp;
				}
				if(maxCompSumSeqS<comp){
					maxCompSumSeqS=comp;
				}
				if(minTimeSumSeqS>t2){
					minTimeSumSeqS=t2;
				}
				if(maxTimeSumSeqS<t2){
					maxTimeSumSeqS=t2;
				}
			}
			window.add(new JLabel("t(ns):"+TimeSumSeqS/10+"Compares:"+CompSumSeqS/10));
			window.repaint();
			for(int j=0;j<7;j++){
				t1 =System.nanoTime();
				comp=binarySearch(dataSorted,dataSorted.get((int)(Math.random()*i)),i);
				CompSumBin+=comp;
				t2=System.nanoTime()-t1;
				TimeSumBin+=comp;
				if(minCompSumBin>comp){
					minCompSumBin=comp;
				}
				if(maxCompSumBin<comp){
					maxCompSumBin=comp;
				}
				if(minTimeSumBin>t2){
					minTimeSumBin=t2;
				}
				if(maxTimeSumBin<t2){
					maxTimeSumBin=t2;
				}
			}
			window.add(new JLabel("t(ns):"+TimeSumBin/10+"Compares:"+CompSumBin/10));
			window.repaint();
			t1 =System.nanoTime();
			comp=seqSearch(data,notThere,i);
			t2=System.nanoTime()-t1;
			for(int j=0;j<7;j++){
				t1 =System.nanoTime();
				CompSumSeqNotS+=seqSearch(data,data.get((int)(Math.random()*i)),i);
				TimeSumSeqNotS+=System.nanoTime()-t1;
				if(minCompSumSeqNotS>comp){
					minCompSumSeqNotS=comp;
				}
				if(maxCompSumSeqNotS<comp){
					maxCompSumSeqNotS=comp;
				}
				if(minTimeSumSeqNotS>t2){
					minTimeSumSeqNotS=t2;
				}
				if(maxTimeSumSeqNotS<t2){
					maxTimeSumSeqNotS=t2;
				}
			}
			window.add(new JLabel("t(ns):"+TimeSumSeqNotS/10+"Compares:"+CompSumSeqNotS/10));
			window.repaint();
			window.add(new JLabel("Worst"));
			window.add(new JLabel("t(ns):"+maxTimeSumSeqS+"Compares:"+maxCompSumSeqS));
			window.add(new JLabel("t(ns):"+maxTimeSumBin+"Compares:"+maxCompSumBin));
			window.add(new JLabel("t(ns):"+maxTimeSumSeqNotS+"Compares:"+maxCompSumSeqNotS));
			window.add(new JLabel("Best"));
			window.add(new JLabel("t(ns):"+minTimeSumSeqS+"Compares:"+minCompSumSeqS));
			window.add(new JLabel("t(ns):"+minTimeSumBin+"Compares:"+minCompSumBin));
			window.add(new JLabel("t(ns):"+minTimeSumSeqNotS+"Compares:"+minCompSumSeqNotS));
		}
	}
	
	private static int binarySearch(ArrayList<String> a, String b, int len){
		int numcom=1;
		int s=0;
		int m=len/2;
		int e=len;
		int comp=1;
		while((comp=a.get(m).compareTo(b))!=0 && s<e-1){
			if(comp<0){
				s=m;
				m=(s+e)/2;
			}else{
				e=m;
				m=(s+e)/2;
			}
			numcom++;
			//System.out.println("s:"+s);
			//System.out.println("e:"+e+"\n");
		}
		return numcom;
	}
	
	private static int seqSearch(ArrayList<String> a, String b, int len){
		int i=0;
		for(; i<len; i++){
			if(a.get(i).equals(b)){
				return i;
			}
		}
		return i;
	}
	
	private static String nameGen(){
		int asciiA=65;
		String name="";
		for(int k=1;k<15;k++){
			name+=(char)((int)(Math.random()*26.0)+asciiA);
		}
		name+=", ";
		for(int k=1;k<15;k++){
			name+=(char)((int)(Math.random()*26.0)+asciiA);
		}
		return name;
	}

}
